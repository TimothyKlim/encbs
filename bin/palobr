#!/usr/bin/env ruby
$LOAD_PATH.unshift(File.expand_path("../../lib/", __FILE__))

require 'rubygems'
require 'yaml'
require 'digest'
require 'fileutils'
require 'openssl'
require 'socket'
require 'helpers'

safe_require do
  require 'slop'
  require 'fog'
  require 'progressbar'
end

require 'backup'

opts = Slop.parse :help => true do
  on :a, :add, "Add path to backup", true
  on :b, :bucket, "Set Amazon S3 bucket to backup", true
  on :k, :key, "Set API key to access Amazon S3", true
  on :s, :secret, "Set API secret to access Amazon S3", true
  on :c, :config, "Use config file to upload backup", true #TODO
  on :colorize, "Colorize print to console"
  on :d, :date, "Date for backup restore (default: last)", true
  on :f, :find, "Find file or directory in backups" #TODO
  on :g, :generate, "Generate 4096 bits RSA keys"
  on :h, :hostname, "Set hostname (default: system)", true
  on :i, :increment, "Use increment mode for backup (default: false)"
  on :j, :jar, "Versions of jar (option: hash or path)", true
  # on :k, :keyfile, "Key to encrypt/decrypt backup", true
  on :l, :local, "Backup in local directory", true
  on :list, "List of jars"
  on :r, :rescue, "Return data from backup (option: jar, path or filter)", true
  on :t, :to, "Path to recovery (default: /)", true
  on :v, :verbose, "Verbose mode" #TODO

  banner "Usage:\n    $ palobr [options]\n\nOptions:"
end

if ARGV.empty?
  puts opts.help

  exit
end

# $VERBOSE = opts.verbose?
$PRINT_VERBOSE = true
$COLORIZE = true

if opts.generate?
  puts "Generate 4096 bits RSA keys"
  Crypto::create_keys(
    File.join(Dir.getwd, "rsa_key"),
  	File.join(Dir.getwd, "rsa_key.pub")
  )
  puts "Done!"

  exit
end

if opts.local?
  try_create_dir opts[:local]
  @backup = Backup::Instance.new opts[:local]
else
  [:key, :secret, :bucket].each do |arg|
    puts_fail "Argument '--#{arg}' should not be empty" if opts[arg].nil?
  end
  @backup = Backup::Instance.new(
    "backups",
    true,
    :bucket => opts[:bucket],
    :key => opts[:key],
    :secret => opts[:secret]
  )
end

@backup.hostname = opts[:hostname] if opts.hostname?

if opts.list?
  jars_list = @backup.jars

  unless jars_list.empty?
    puts "List of jars:\n"
    jars_list.keys.sort.each do |key|
      puts "    #{key.dark_green}: #{jars_list[key]}"
    end
  else
    puts "Nothing to listing."
  end

  exit
end

#TODO: AES or RSA
# @backup.key = opts[:key] if opts.key?

if opts.date?
  date = opts[:date].split("-")

  unless date.length == 1
    @start_date = Backup::Timestamp.parse_timestamp date[0]
    @end_date = Backup::Timestamp.parse_timestamp date[1], true

    puts_fail "Last date less than start date" if start_date > end_date
  else
    @start_date = Backup::Timestamp.parse_timestamp date[0]
    @end_date = Backup::Timestamp.parse_timestamp date[0], true
  end
else
  @start_date = nil
  @end_date = Time.now.utc
end

if opts.jar?
  opts[:jar].split(" ").each do |jar|
    versions = @backup.jar_versions(jar)

    unless versions.empty?
      puts "Versions of backup '#{jar}':"

      versions.each do |version|
        puts " => #{version.dark_green}: #{Backup::Timestamp.to_str(version)}"
      end
    else
      puts "Versions doesn't exists for jar: #{jar}"
    end
  end

  exit
end

#TODO: Support rescue option as hash
if opts.rescue?
  paths = opts[:rescue].split(" ")
  jars_list = @backup.jars

  include_path = lambda {|path| jars_list.keys.include? path}

  jars_hashes = paths.map do |path|
    path = File.expand_path path

    unless include_path[path] or include_path["#{path}/"]
      puts_fail "Jar \"#{path}\" not exists." 
    end

    jars_list[path] || jars_list["#{path}/"]
  end

  if opts.to?
    @to = File.expand_path opts[:to]
    try_create_dir @to
  else
    @to = "/"
  end

  #TODO: Confirm flag
  #TODO: Empty destination directory

  @index = {}

  jars_hashes.each do |hash|
    versions = @backup.jar_versions(hash)
    # puts "Versions: #{versions}" #FIXME

    last_version = Backup::Timestamp.last_from(versions, @end_date, @start_date)

    unless last_version.nil?
      @index[hash] = last_version
    else
      error_path = "#{Backup::Jar.hash_to_path(@backup.root_path, hash)}"
      start_date = Backup::Timestamp.to_s(@start_date)
      end_date = Backup::Timestamp.to_s(@end_date)

      unless @end_date == @start_date
        puts_fail "Nothing found for #{error_path}, between date: #{start_date} - #{end_date}"
      else
        puts_fail "Nothing found for #{error_path}, for date: #{end_date}"
      end
    end
  end

  @index.each do |hash, timestamp|
    # puts "#{hash}: #{timestamp}" #FIXME
    @backup.restore_jar_to(hash, timestamp, @to)
  end

  puts "Done!".green
  exit
end

if opts.add?
  paths = opts[:add].split(" ")

  paths = paths.map do |path|
    path = File.expand_path path
    puts_fail "Path \"#{path}\" not exists." unless File.exists? path

    path
  end

  paths.each do |path|
    @backup.create! path, opts.increment?
  end

  puts "Done!".green
end
